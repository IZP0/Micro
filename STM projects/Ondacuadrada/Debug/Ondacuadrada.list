
Ondacuadrada.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb0  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800320c  0800320c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800320c  0800320c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800320c  0800320c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003210  08003210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08003220  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08003220  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2fa  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017e6  00000000  00000000  0002c37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  0002db68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000096a  00000000  00000000  0002e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fbd1  00000000  00000000  0002f112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d808  00000000  00000000  0005ece3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013620c  00000000  00000000  0006c4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033f4  00000000  00000000  001a26f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  001a5aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	080031e4 	.word	0x080031e4

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	080031e4 	.word	0x080031e4

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000290:	f000 fa48 	bl	8000724 <HAL_Init>

  /* USER CODE BEGIN Init */
   HAL_Init();
 8000294:	f000 fa46 	bl	8000724 <HAL_Init>
   SystemClock_Config();
 8000298:	f000 f814 	bl	80002c4 <SystemClock_Config>
   MX_GPIO_Init();
 800029c:	f000 f910 	bl	80004c0 <MX_GPIO_Init>
   MX_TIM3_Init();
 80002a0:	f000 f894 	bl	80003cc <MX_TIM3_Init>

   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002a4:	2100      	movs	r1, #0
 80002a6:	4806      	ldr	r0, [pc, #24]	; (80002c0 <main+0x34>)
 80002a8:	f001 fd58 	bl	8001d5c <HAL_TIM_PWM_Start>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ac:	f000 f80a 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b0:	f000 f906 	bl	80004c0 <MX_GPIO_Init>
  MX_TIM3_Init();
 80002b4:	f000 f88a 	bl	80003cc <MX_TIM3_Init>
  MX_ICACHE_Init();
 80002b8:	f000 f85c 	bl	8000374 <MX_ICACHE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002bc:	e7fe      	b.n	80002bc <main+0x30>
 80002be:	bf00      	nop
 80002c0:	20000028 	.word	0x20000028

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b09c      	sub	sp, #112	; 0x70
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0320 	add.w	r3, r7, #32
 80002ce:	2250      	movs	r2, #80	; 0x50
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 ff5a 	bl	800318c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 0308 	add.w	r3, r7, #8
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
 80002e8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80002ea:	4b21      	ldr	r3, [pc, #132]	; (8000370 <SystemClock_Config+0xac>)
 80002ec:	691b      	ldr	r3, [r3, #16]
 80002ee:	4a20      	ldr	r2, [pc, #128]	; (8000370 <SystemClock_Config+0xac>)
 80002f0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80002f4:	6113      	str	r3, [r2, #16]
 80002f6:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <SystemClock_Config+0xac>)
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000302:	bf00      	nop
 8000304:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <SystemClock_Config+0xac>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	f003 0308 	and.w	r3, r3, #8
 800030c:	2b08      	cmp	r3, #8
 800030e:	d1f9      	bne.n	8000304 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000310:	2302      	movs	r3, #2
 8000312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000314:	2301      	movs	r3, #1
 8000316:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000318:	2308      	movs	r3, #8
 800031a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031c:	2340      	movs	r3, #64	; 0x40
 800031e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000320:	2300      	movs	r3, #0
 8000322:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000324:	f107 0320 	add.w	r3, r7, #32
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fd27 	bl	8000d7c <HAL_RCC_OscConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000334:	f000 f8f8 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000338:	231f      	movs	r3, #31
 800033a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000350:	f107 0308 	add.w	r3, r7, #8
 8000354:	2101      	movs	r1, #1
 8000356:	4618      	mov	r0, r3
 8000358:	f001 f948 	bl	80015ec <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000362:	f000 f8e1 	bl	8000528 <Error_Handler>
  }
}
 8000366:	bf00      	nop
 8000368:	3770      	adds	r7, #112	; 0x70
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	44020800 	.word	0x44020800

08000374 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	609a      	str	r2, [r3, #8]
 8000384:	60da      	str	r2, [r3, #12]
 8000386:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable region 0 for memory remapping
  */
  pRegionConfig.BaseAddress = 0x10000000;
 8000388:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800038c:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 800038e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000392:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8000394:	2301      	movs	r3, #1
 8000396:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8000398:	2300      	movs	r3, #0
 800039a:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4619      	mov	r1, r3
 80003a4:	2000      	movs	r0, #0
 80003a6:	f000 fc97 	bl	8000cd8 <HAL_ICACHE_EnableRemapRegion>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_ICACHE_Init+0x40>
  {
    Error_Handler();
 80003b0:	f000 f8ba 	bl	8000528 <Error_Handler>
  }

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003b4:	f000 fc80 	bl	8000cb8 <HAL_ICACHE_Enable>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 80003be:	f000 f8b3 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08e      	sub	sp, #56	; 0x38
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e0:	f107 031c 	add.w	r3, r7, #28
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003ec:	4b31      	ldr	r3, [pc, #196]	; (80004b4 <MX_TIM3_Init+0xe8>)
 80003ee:	4a32      	ldr	r2, [pc, #200]	; (80004b8 <MX_TIM3_Init+0xec>)
 80003f0:	601a      	str	r2, [r3, #0]
  	  htim3.Init.Prescaler = 1000; // Ajusta el preescalador según la frecuencia deseada
 80003f2:	4b30      	ldr	r3, [pc, #192]	; (80004b4 <MX_TIM3_Init+0xe8>)
 80003f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003f8:	605a      	str	r2, [r3, #4]
  	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fa:	4b2e      	ldr	r3, [pc, #184]	; (80004b4 <MX_TIM3_Init+0xe8>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  	  htim3.Init.Period = 1000; // Ajusta el período según la frecuencia deseada
 8000400:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <MX_TIM3_Init+0xe8>)
 8000402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000406:	60da      	str	r2, [r3, #12]
  	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000408:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <MX_TIM3_Init+0xe8>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  	  HAL_TIM_PWM_Init(&htim3);
 800040e:	4829      	ldr	r0, [pc, #164]	; (80004b4 <MX_TIM3_Init+0xe8>)
 8000410:	f001 fc43 	bl	8001c9a <HAL_TIM_PWM_Init>
  	  TIM_OC_InitTypeDef sConfigOC;
  	      sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000414:	2360      	movs	r3, #96	; 0x60
 8000416:	603b      	str	r3, [r7, #0]
  	      sConfigOC.Pulse = htim3.Init.Period * DUTY_CYCLE / 100;
 8000418:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <MX_TIM3_Init+0xe8>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	2232      	movs	r2, #50	; 0x32
 800041e:	fb02 f303 	mul.w	r3, r2, r3
 8000422:	4a26      	ldr	r2, [pc, #152]	; (80004bc <MX_TIM3_Init+0xf0>)
 8000424:	fba2 2303 	umull	r2, r3, r2, r3
 8000428:	095b      	lsrs	r3, r3, #5
 800042a:	607b      	str	r3, [r7, #4]
  	      sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800042c:	2300      	movs	r3, #0
 800042e:	60bb      	str	r3, [r7, #8]
  	      HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8000430:	463b      	mov	r3, r7
 8000432:	2200      	movs	r2, #0
 8000434:	4619      	mov	r1, r3
 8000436:	481f      	ldr	r0, [pc, #124]	; (80004b4 <MX_TIM3_Init+0xe8>)
 8000438:	f001 fdf0 	bl	800201c <HAL_TIM_PWM_ConfigChannel>
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800043c:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <MX_TIM3_Init+0xe8>)
 800043e:	4a1e      	ldr	r2, [pc, #120]	; (80004b8 <MX_TIM3_Init+0xec>)
 8000440:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000442:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <MX_TIM3_Init+0xe8>)
 8000444:	2200      	movs	r2, #0
 8000446:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000448:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_TIM3_Init+0xe8>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800044e:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <MX_TIM3_Init+0xe8>)
 8000450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000454:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000456:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <MX_TIM3_Init+0xe8>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_TIM3_Init+0xe8>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000462:	4814      	ldr	r0, [pc, #80]	; (80004b4 <MX_TIM3_Init+0xe8>)
 8000464:	f001 fbc2 	bl	8001bec <HAL_TIM_Base_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800046e:	f000 f85b 	bl	8000528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000476:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800047c:	4619      	mov	r1, r3
 800047e:	480d      	ldr	r0, [pc, #52]	; (80004b4 <MX_TIM3_Init+0xe8>)
 8000480:	f001 fee0 	bl	8002244 <HAL_TIM_ConfigClockSource>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 800048a:	f000 f84d 	bl	8000528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000492:	2300      	movs	r3, #0
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000496:	f107 031c 	add.w	r3, r7, #28
 800049a:	4619      	mov	r1, r3
 800049c:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_TIM3_Init+0xe8>)
 800049e:	f002 fda5 	bl	8002fec <HAL_TIMEx_MasterConfigSynchronization>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80004a8:	f000 f83e 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	3738      	adds	r7, #56	; 0x38
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000028 	.word	0x20000028
 80004b8:	40000400 	.word	0x40000400
 80004bc:	51eb851f 	.word	0x51eb851f

080004c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <MX_GPIO_Init+0x60>)
 80004d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80004da:	4a11      	ldr	r2, [pc, #68]	; (8000520 <MX_GPIO_Init+0x60>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_GPIO_Init+0x60>)
 80004e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2140      	movs	r1, #64	; 0x40
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <MX_GPIO_Init+0x64>)
 80004f8:	f000 fbc6 	bl	8000c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004fc:	2340      	movs	r3, #64	; 0x40
 80004fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	2301      	movs	r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	2300      	movs	r3, #0
 800050a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	4619      	mov	r1, r3
 8000510:	4804      	ldr	r0, [pc, #16]	; (8000524 <MX_GPIO_Init+0x64>)
 8000512:	f000 fa67 	bl	80009e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000516:	bf00      	nop
 8000518:	3718      	adds	r7, #24
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	44020c00 	.word	0x44020c00
 8000524:	42020000 	.word	0x42020000

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	e7fe      	b.n	8000530 <Error_Handler+0x8>

08000532 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a0b      	ldr	r2, [pc, #44]	; (800057c <HAL_TIM_Base_MspInit+0x3c>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d10e      	bne.n	8000570 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <HAL_TIM_Base_MspInit+0x40>)
 8000554:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000558:	4a09      	ldr	r2, [pc, #36]	; (8000580 <HAL_TIM_Base_MspInit+0x40>)
 800055a:	f043 0302 	orr.w	r3, r3, #2
 800055e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <HAL_TIM_Base_MspInit+0x40>)
 8000564:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000568:	f003 0302 	and.w	r3, r3, #2
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40000400 	.word	0x40000400
 8000580:	44020c00 	.word	0x44020c00

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000588:	e7fe      	b.n	8000588 <NMI_Handler+0x4>

0800058a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <HardFault_Handler+0x4>

08000590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <MemManage_Handler+0x4>

08000596 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d0:	f000 f904 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005de:	4b35      	ldr	r3, [pc, #212]	; (80006b4 <SystemInit+0xdc>)
 80005e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e4:	4a33      	ldr	r2, [pc, #204]	; (80006b4 <SystemInit+0xdc>)
 80005e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80005ee:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <SystemInit+0xe0>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80005f4:	4b30      	ldr	r3, [pc, #192]	; (80006b8 <SystemInit+0xe0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80005fa:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <SystemInit+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000600:	4b2d      	ldr	r3, [pc, #180]	; (80006b8 <SystemInit+0xe0>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	492c      	ldr	r1, [pc, #176]	; (80006b8 <SystemInit+0xe0>)
 8000606:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <SystemInit+0xe4>)
 8000608:	4013      	ands	r3, r2
 800060a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <SystemInit+0xe0>)
 800060e:	2200      	movs	r2, #0
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SystemInit+0xe0>)
 8000614:	2200      	movs	r2, #0
 8000616:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <SystemInit+0xe0>)
 800061a:	2200      	movs	r2, #0
 800061c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800061e:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <SystemInit+0xe0>)
 8000620:	4a27      	ldr	r2, [pc, #156]	; (80006c0 <SystemInit+0xe8>)
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <SystemInit+0xe0>)
 8000626:	2200      	movs	r2, #0
 8000628:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800062a:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemInit+0xe0>)
 800062c:	4a24      	ldr	r2, [pc, #144]	; (80006c0 <SystemInit+0xe8>)
 800062e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000630:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <SystemInit+0xe0>)
 8000632:	2200      	movs	r2, #0
 8000634:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <SystemInit+0xe0>)
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemInit+0xe8>)
 800063a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <SystemInit+0xe0>)
 800063e:	2200      	movs	r2, #0
 8000640:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <SystemInit+0xe0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <SystemInit+0xe0>)
 8000648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800064c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <SystemInit+0xe0>)
 8000650:	2200      	movs	r2, #0
 8000652:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <SystemInit+0xdc>)
 8000656:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800065a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <SystemInit+0xec>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000664:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800066c:	d003      	beq.n	8000676 <SystemInit+0x9e>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000674:	d117      	bne.n	80006a6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <SystemInit+0xec>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	2b00      	cmp	r3, #0
 8000680:	d005      	beq.n	800068e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <SystemInit+0xec>)
 8000684:	4a10      	ldr	r2, [pc, #64]	; (80006c8 <SystemInit+0xf0>)
 8000686:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <SystemInit+0xec>)
 800068a:	4a10      	ldr	r2, [pc, #64]	; (80006cc <SystemInit+0xf4>)
 800068c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <SystemInit+0xec>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <SystemInit+0xec>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <SystemInit+0xec>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <SystemInit+0xec>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	61d3      	str	r3, [r2, #28]
  }
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00
 80006b8:	44020c00 	.word	0x44020c00
 80006bc:	eae2eae3 	.word	0xeae2eae3
 80006c0:	01010280 	.word	0x01010280
 80006c4:	40022000 	.word	0x40022000
 80006c8:	08192a3b 	.word	0x08192a3b
 80006cc:	4c5d6e7f 	.word	0x4c5d6e7f

080006d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006d4:	f7ff ff80 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <LoopForever+0x6>)
  ldr r1, =_edata
 80006da:	490d      	ldr	r1, [pc, #52]	; (8000710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <LoopForever+0xe>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f0:	4c0a      	ldr	r4, [pc, #40]	; (800071c <LoopForever+0x16>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006fe:	f002 fd4d 	bl	800319c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000702:	f7ff fdc3 	bl	800028c <main>

08000706 <LoopForever>:

LoopForever:
    b LoopForever
 8000706:	e7fe      	b.n	8000706 <LoopForever>
  ldr   r0, =_estack
 8000708:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000714:	08003214 	.word	0x08003214
  ldr r2, =_sbss
 8000718:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800071c:	20000078 	.word	0x20000078

08000720 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_IRQHandler>
	...

08000724 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f929 	bl	8000980 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800072e:	f001 f915 	bl	800195c <HAL_RCC_GetSysClockFreq>
 8000732:	4602      	mov	r2, r0
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <HAL_Init+0x40>)
 8000736:	6a1b      	ldr	r3, [r3, #32]
 8000738:	f003 030f 	and.w	r3, r3, #15
 800073c:	490a      	ldr	r1, [pc, #40]	; (8000768 <HAL_Init+0x44>)
 800073e:	5ccb      	ldrb	r3, [r1, r3]
 8000740:	fa22 f303 	lsr.w	r3, r2, r3
 8000744:	4a09      	ldr	r2, [pc, #36]	; (800076c <HAL_Init+0x48>)
 8000746:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000748:	200f      	movs	r0, #15
 800074a:	f000 f811 	bl	8000770 <HAL_InitTick>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000754:	2301      	movs	r3, #1
 8000756:	e002      	b.n	800075e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000758:	f7ff feeb 	bl	8000532 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	44020c00 	.word	0x44020c00
 8000768:	080031fc 	.word	0x080031fc
 800076c:	20000000 	.word	0x20000000

08000770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_InitTick+0x60>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	e021      	b.n	80007c8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <HAL_InitTick+0x64>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <HAL_InitTick+0x60>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	fbb3 f3f1 	udiv	r3, r3, r1
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f915 	bl	80009ca <HAL_SYSTICK_Config>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00e      	b.n	80007c8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d80a      	bhi.n	80007c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b0:	2200      	movs	r2, #0
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f000 f8ed 	bl	8000996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <HAL_InitTick+0x68>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000008 	.word	0x20000008
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000004 	.word	0x20000004

080007dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_IncTick+0x20>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_IncTick+0x24>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <HAL_IncTick+0x24>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000074 	.word	0x20000074

08000804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return uwTick;
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <HAL_GetTick+0x14>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000074 	.word	0x20000074

0800081c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084e:	4a04      	ldr	r2, [pc, #16]	; (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	60d3      	str	r3, [r2, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <__NVIC_GetPriorityGrouping+0x18>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	f003 0307 	and.w	r3, r3, #7
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800088c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000890:	2b00      	cmp	r3, #0
 8000892:	db0a      	blt.n	80008aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	490c      	ldr	r1, [pc, #48]	; (80008cc <__NVIC_SetPriority+0x4c>)
 800089a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800089e:	0112      	lsls	r2, r2, #4
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	440b      	add	r3, r1
 80008a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a8:	e00a      	b.n	80008c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4908      	ldr	r1, [pc, #32]	; (80008d0 <__NVIC_SetPriority+0x50>)
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	3b04      	subs	r3, #4
 80008b8:	0112      	lsls	r2, r2, #4
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	440b      	add	r3, r1
 80008be:	761a      	strb	r2, [r3, #24]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b089      	sub	sp, #36	; 0x24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	f1c3 0307 	rsb	r3, r3, #7
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	bf28      	it	cs
 80008f2:	2304      	movcs	r3, #4
 80008f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3304      	adds	r3, #4
 80008fa:	2b06      	cmp	r3, #6
 80008fc:	d902      	bls.n	8000904 <NVIC_EncodePriority+0x30>
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3b03      	subs	r3, #3
 8000902:	e000      	b.n	8000906 <NVIC_EncodePriority+0x32>
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	f04f 32ff 	mov.w	r2, #4294967295
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43da      	mvns	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	401a      	ands	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800091c:	f04f 31ff 	mov.w	r1, #4294967295
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	43d9      	mvns	r1, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	4313      	orrs	r3, r2
         );
}
 800092e:	4618      	mov	r0, r3
 8000930:	3724      	adds	r7, #36	; 0x24
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800094c:	d301      	bcc.n	8000952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800094e:	2301      	movs	r3, #1
 8000950:	e00f      	b.n	8000972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <SysTick_Config+0x40>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095a:	210f      	movs	r1, #15
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	f7ff ff8e 	bl	8000880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <SysTick_Config+0x40>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <SysTick_Config+0x40>)
 800096c:	2207      	movs	r2, #7
 800096e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	e000e010 	.word	0xe000e010

08000980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ff47 	bl	800081c <__NVIC_SetPriorityGrouping>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b086      	sub	sp, #24
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
 80009a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009a4:	f7ff ff5e 	bl	8000864 <__NVIC_GetPriorityGrouping>
 80009a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	6978      	ldr	r0, [r7, #20]
 80009b0:	f7ff ff90 	bl	80008d4 <NVIC_EncodePriority>
 80009b4:	4602      	mov	r2, r0
 80009b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff5f 	bl	8000880 <__NVIC_SetPriority>
}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ffb2 	bl	800093c <SysTick_Config>
 80009d8:	4603      	mov	r3, r0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b087      	sub	sp, #28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80009f2:	e136      	b.n	8000c62 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	2101      	movs	r1, #1
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000a00:	4013      	ands	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f000 8128 	beq.w	8000c5c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d003      	beq.n	8000a1c <HAL_GPIO_Init+0x38>
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	2b12      	cmp	r3, #18
 8000a1a:	d125      	bne.n	8000a68 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	08da      	lsrs	r2, r3, #3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3208      	adds	r2, #8
 8000a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a28:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	f003 0307 	and.w	r3, r3, #7
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	220f      	movs	r2, #15
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	691b      	ldr	r3, [r3, #16]
 8000a44:	f003 020f 	and.w	r2, r3, #15
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	08da      	lsrs	r2, r3, #3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3208      	adds	r2, #8
 8000a62:	6979      	ldr	r1, [r7, #20]
 8000a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	2203      	movs	r2, #3
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f003 0203 	and.w	r2, r3, #3
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d00b      	beq.n	8000abc <HAL_GPIO_Init+0xd8>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d007      	beq.n	8000abc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ab0:	2b11      	cmp	r3, #17
 8000ab2:	d003      	beq.n	8000abc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2b12      	cmp	r3, #18
 8000aba:	d130      	bne.n	8000b1e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	68da      	ldr	r2, [r3, #12]
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000af2:	2201      	movs	r2, #1
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	4013      	ands	r3, r2
 8000b00:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	091b      	lsrs	r3, r3, #4
 8000b08:	f003 0201 	and.w	r2, r3, #1
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	d017      	beq.n	8000b56 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d07c      	beq.n	8000c5c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000b62:	4a47      	ldr	r2, [pc, #284]	; (8000c80 <HAL_GPIO_Init+0x29c>)
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	3318      	adds	r3, #24
 8000b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	220f      	movs	r2, #15
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	4013      	ands	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	0a9a      	lsrs	r2, r3, #10
 8000b8a:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <HAL_GPIO_Init+0x2a0>)
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	f002 0203 	and.w	r2, r2, #3
 8000b94:	00d2      	lsls	r2, r2, #3
 8000b96:	4093      	lsls	r3, r2
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000b9e:	4938      	ldr	r1, [pc, #224]	; (8000c80 <HAL_GPIO_Init+0x29c>)
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	3318      	adds	r3, #24
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000bac:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <HAL_GPIO_Init+0x29c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000bd0:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_GPIO_Init+0x29c>)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <HAL_GPIO_Init+0x29c>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	43db      	mvns	r3, r3
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	4013      	ands	r3, r2
 8000be4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000bfa:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <HAL_GPIO_Init+0x29c>)
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HAL_GPIO_Init+0x29c>)
 8000c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c06:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000c26:	4a16      	ldr	r2, [pc, #88]	; (8000c80 <HAL_GPIO_Init+0x29c>)
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_GPIO_Init+0x29c>)
 8000c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c34:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_GPIO_Init+0x29c>)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	fa22 f303 	lsr.w	r3, r2, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f47f aec1 	bne.w	80009f4 <HAL_GPIO_Init+0x10>
  }
}
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
 8000c76:	371c      	adds	r7, #28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	44022000 	.word	0x44022000
 8000c84:	002f7f7f 	.word	0x002f7f7f

08000c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c98:	787b      	ldrb	r3, [r7, #1]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ca4:	e002      	b.n	8000cac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ca6:	887a      	ldrh	r2, [r7, #2]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_ICACHE_Enable+0x1c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_ICACHE_Enable+0x1c>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	40030400 	.word	0x40030400

08000cd8 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	75fb      	strb	r3, [r7, #23]
 8000cf6:	e034      	b.n	8000d62 <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	009a      	lsls	r2, r3, #2
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	75fb      	strb	r3, [r7, #23]
 8000d12:	e026      	b.n	8000d62 <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8000d20:	4013      	ands	r3, r2
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	425b      	negs	r3, r3
 8000d32:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8000d34:	401a      	ands	r2, r3
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	025a      	lsls	r2, r3, #9
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8000d50:	4313      	orrs	r3, r2
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8000d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	371c      	adds	r7, #28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	40030400 	.word	0x40030400
 8000d74:	40030420 	.word	0x40030420
 8000d78:	07ff0000 	.word	0x07ff0000

08000d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f000 bc28 	b.w	80015e0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d90:	4b94      	ldr	r3, [pc, #592]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	f003 0318 	and.w	r3, r3, #24
 8000d98:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8000d9a:	4b92      	ldr	r3, [pc, #584]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0310 	and.w	r3, r3, #16
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d05b      	beq.n	8000e68 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	2b08      	cmp	r3, #8
 8000db4:	d005      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x46>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	2b18      	cmp	r3, #24
 8000dba:	d114      	bne.n	8000de6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d111      	bne.n	8000de6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d102      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	f000 bc08 	b.w	80015e0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8000dd0:	4b84      	ldr	r3, [pc, #528]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	4981      	ldr	r1, [pc, #516]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000de0:	4313      	orrs	r3, r2
 8000de2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8000de4:	e040      	b.n	8000e68 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d023      	beq.n	8000e36 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000dee:	4b7d      	ldr	r3, [pc, #500]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a7c      	ldr	r2, [pc, #496]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dfa:	f7ff fd03 	bl	8000804 <HAL_GetTick>
 8000dfe:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8000e00:	e008      	b.n	8000e14 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8000e02:	f7ff fcff 	bl	8000804 <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e3e5      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8000e14:	4b73      	ldr	r3, [pc, #460]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0f0      	beq.n	8000e02 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8000e20:	4b70      	ldr	r3, [pc, #448]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	041b      	lsls	r3, r3, #16
 8000e2e:	496d      	ldr	r1, [pc, #436]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000e30:	4313      	orrs	r3, r2
 8000e32:	618b      	str	r3, [r1, #24]
 8000e34:	e018      	b.n	8000e68 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000e36:	4b6b      	ldr	r3, [pc, #428]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a6a      	ldr	r2, [pc, #424]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e42:	f7ff fcdf 	bl	8000804 <HAL_GetTick>
 8000e46:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8000e48:	e008      	b.n	8000e5c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8000e4a:	f7ff fcdb 	bl	8000804 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e3c1      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8000e5c:	4b61      	ldr	r3, [pc, #388]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f0      	bne.n	8000e4a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 80a0 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	2b10      	cmp	r3, #16
 8000e7a:	d005      	beq.n	8000e88 <HAL_RCC_OscConfig+0x10c>
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	2b18      	cmp	r3, #24
 8000e80:	d109      	bne.n	8000e96 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d106      	bne.n	8000e96 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f040 8092 	bne.w	8000fb6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e3a4      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e9e:	d106      	bne.n	8000eae <HAL_RCC_OscConfig+0x132>
 8000ea0:	4b50      	ldr	r3, [pc, #320]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a4f      	ldr	r2, [pc, #316]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	e058      	b.n	8000f60 <HAL_RCC_OscConfig+0x1e4>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d112      	bne.n	8000edc <HAL_RCC_OscConfig+0x160>
 8000eb6:	4b4b      	ldr	r3, [pc, #300]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a4a      	ldr	r2, [pc, #296]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	4b48      	ldr	r3, [pc, #288]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a47      	ldr	r2, [pc, #284]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000ec8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	4b45      	ldr	r3, [pc, #276]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a44      	ldr	r2, [pc, #272]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	e041      	b.n	8000f60 <HAL_RCC_OscConfig+0x1e4>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ee4:	d112      	bne.n	8000f0c <HAL_RCC_OscConfig+0x190>
 8000ee6:	4b3f      	ldr	r3, [pc, #252]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a3e      	ldr	r2, [pc, #248]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	4b3c      	ldr	r3, [pc, #240]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a3b      	ldr	r2, [pc, #236]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000ef8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b39      	ldr	r3, [pc, #228]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a38      	ldr	r2, [pc, #224]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e029      	b.n	8000f60 <HAL_RCC_OscConfig+0x1e4>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8000f14:	d112      	bne.n	8000f3c <HAL_RCC_OscConfig+0x1c0>
 8000f16:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a32      	ldr	r2, [pc, #200]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a2f      	ldr	r2, [pc, #188]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a2c      	ldr	r2, [pc, #176]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e011      	b.n	8000f60 <HAL_RCC_OscConfig+0x1e4>
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a25      	ldr	r2, [pc, #148]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f68:	f7ff fc4c 	bl	8000804 <HAL_GetTick>
 8000f6c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000f70:	f7ff fc48 	bl	8000804 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b64      	cmp	r3, #100	; 0x64
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e32e      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0x1f4>
 8000f8e:	e012      	b.n	8000fb6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f90:	f7ff fc38 	bl	8000804 <HAL_GetTick>
 8000f94:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000f98:	f7ff fc34 	bl	8000804 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b64      	cmp	r3, #100	; 0x64
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e31a      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_RCC_OscConfig+0x268>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 809a 	beq.w	80010f8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d005      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x25a>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	2b18      	cmp	r3, #24
 8000fce:	d149      	bne.n	8001064 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d146      	bne.n	8001064 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d104      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e2fe      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
 8000fe2:	bf00      	nop
 8000fe4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d11c      	bne.n	8001028 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8000fee:	4b9a      	ldr	r3, [pc, #616]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0218 	and.w	r2, r3, #24
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d014      	beq.n	8001028 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8000ffe:	4b96      	ldr	r3, [pc, #600]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 0218 	bic.w	r2, r3, #24
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	4993      	ldr	r1, [pc, #588]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 800100c:	4313      	orrs	r3, r2
 800100e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001010:	f000 fdd0 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001014:	4b91      	ldr	r3, [pc, #580]	; (800125c <HAL_RCC_OscConfig+0x4e0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fba9 	bl	8000770 <HAL_InitTick>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e2db      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001028:	f7ff fbec 	bl	8000804 <HAL_GetTick>
 800102c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001030:	f7ff fbe8 	bl	8000804 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e2ce      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001042:	4b85      	ldr	r3, [pc, #532]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800104e:	4b82      	ldr	r3, [pc, #520]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	497e      	ldr	r1, [pc, #504]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 800105e:	4313      	orrs	r3, r2
 8001060:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001062:	e049      	b.n	80010f8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d02c      	beq.n	80010c6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800106c:	4b7a      	ldr	r3, [pc, #488]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f023 0218 	bic.w	r2, r3, #24
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	4977      	ldr	r1, [pc, #476]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 800107a:	4313      	orrs	r3, r2
 800107c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800107e:	4b76      	ldr	r3, [pc, #472]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a75      	ldr	r2, [pc, #468]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108a:	f7ff fbbb 	bl	8000804 <HAL_GetTick>
 800108e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001092:	f7ff fbb7 	bl	8000804 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e29d      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010a4:	4b6c      	ldr	r3, [pc, #432]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0f0      	beq.n	8001092 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80010b0:	4b69      	ldr	r3, [pc, #420]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	041b      	lsls	r3, r3, #16
 80010be:	4966      	ldr	r1, [pc, #408]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	610b      	str	r3, [r1, #16]
 80010c4:	e018      	b.n	80010f8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c6:	4b64      	ldr	r3, [pc, #400]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a63      	ldr	r2, [pc, #396]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 80010cc:	f023 0301 	bic.w	r3, r3, #1
 80010d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d2:	f7ff fb97 	bl	8000804 <HAL_GetTick>
 80010d6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80010da:	f7ff fb93 	bl	8000804 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e279      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010ec:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f0      	bne.n	80010da <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d03c      	beq.n	800117e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d01c      	beq.n	8001146 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110c:	4b52      	ldr	r3, [pc, #328]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 800110e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001112:	4a51      	ldr	r2, [pc, #324]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001114:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001118:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800111c:	f7ff fb72 	bl	8000804 <HAL_GetTick>
 8001120:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001124:	f7ff fb6e 	bl	8000804 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e254      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001136:	4b48      	ldr	r3, [pc, #288]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800113c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0ef      	beq.n	8001124 <HAL_RCC_OscConfig+0x3a8>
 8001144:	e01b      	b.n	800117e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001146:	4b44      	ldr	r3, [pc, #272]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800114c:	4a42      	ldr	r2, [pc, #264]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 800114e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001152:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001156:	f7ff fb55 	bl	8000804 <HAL_GetTick>
 800115a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800115e:	f7ff fb51 	bl	8000804 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e237      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001170:	4b39      	ldr	r3, [pc, #228]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001176:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1ef      	bne.n	800115e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80d2 	beq.w	8001330 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800118c:	4b34      	ldr	r3, [pc, #208]	; (8001260 <HAL_RCC_OscConfig+0x4e4>)
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d118      	bne.n	80011ca <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001198:	4b31      	ldr	r3, [pc, #196]	; (8001260 <HAL_RCC_OscConfig+0x4e4>)
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	4a30      	ldr	r2, [pc, #192]	; (8001260 <HAL_RCC_OscConfig+0x4e4>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011a4:	f7ff fb2e 	bl	8000804 <HAL_GetTick>
 80011a8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ac:	f7ff fb2a 	bl	8000804 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e210      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <HAL_RCC_OscConfig+0x4e4>)
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d108      	bne.n	80011e4 <HAL_RCC_OscConfig+0x468>
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 80011d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011d8:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011e2:	e074      	b.n	80012ce <HAL_RCC_OscConfig+0x552>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d118      	bne.n	800121e <HAL_RCC_OscConfig+0x4a2>
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 80011ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011f2:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 80011fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001208:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 800120e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001214:	f023 0304 	bic.w	r3, r3, #4
 8001218:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800121c:	e057      	b.n	80012ce <HAL_RCC_OscConfig+0x552>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b05      	cmp	r3, #5
 8001224:	d11e      	bne.n	8001264 <HAL_RCC_OscConfig+0x4e8>
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800123c:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 800123e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001242:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800124c:	4a02      	ldr	r2, [pc, #8]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001256:	e03a      	b.n	80012ce <HAL_RCC_OscConfig+0x552>
 8001258:	44020c00 	.word	0x44020c00
 800125c:	20000004 	.word	0x20000004
 8001260:	44020800 	.word	0x44020800
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b85      	cmp	r3, #133	; 0x85
 800126a:	d118      	bne.n	800129e <HAL_RCC_OscConfig+0x522>
 800126c:	4ba2      	ldr	r3, [pc, #648]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 800126e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001272:	4aa1      	ldr	r2, [pc, #644]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800127c:	4b9e      	ldr	r3, [pc, #632]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 800127e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001282:	4a9d      	ldr	r2, [pc, #628]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001288:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800128c:	4b9a      	ldr	r3, [pc, #616]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 800128e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001292:	4a99      	ldr	r2, [pc, #612]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800129c:	e017      	b.n	80012ce <HAL_RCC_OscConfig+0x552>
 800129e:	4b96      	ldr	r3, [pc, #600]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80012a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012a4:	4a94      	ldr	r2, [pc, #592]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012ae:	4b92      	ldr	r3, [pc, #584]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80012b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012b4:	4a90      	ldr	r2, [pc, #576]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80012b6:	f023 0304 	bic.w	r3, r3, #4
 80012ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012be:	4b8e      	ldr	r3, [pc, #568]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80012c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012c4:	4a8c      	ldr	r2, [pc, #560]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80012c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d016      	beq.n	8001304 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d6:	f7ff fa95 	bl	8000804 <HAL_GetTick>
 80012da:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012dc:	e00a      	b.n	80012f4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012de:	f7ff fa91 	bl	8000804 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e175      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012f4:	4b80      	ldr	r3, [pc, #512]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80012f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0ed      	beq.n	80012de <HAL_RCC_OscConfig+0x562>
 8001302:	e015      	b.n	8001330 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001304:	f7ff fa7e 	bl	8000804 <HAL_GetTick>
 8001308:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800130a:	e00a      	b.n	8001322 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130c:	f7ff fa7a 	bl	8000804 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f241 3288 	movw	r2, #5000	; 0x1388
 800131a:	4293      	cmp	r3, r2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e15e      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001322:	4b75      	ldr	r3, [pc, #468]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 8001324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1ed      	bne.n	800130c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d036      	beq.n	80013aa <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	2b00      	cmp	r3, #0
 8001342:	d019      	beq.n	8001378 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001344:	4b6c      	ldr	r3, [pc, #432]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a6b      	ldr	r2, [pc, #428]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 800134a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800134e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001350:	f7ff fa58 	bl	8000804 <HAL_GetTick>
 8001354:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001358:	f7ff fa54 	bl	8000804 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e13a      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800136a:	4b63      	ldr	r3, [pc, #396]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x5dc>
 8001376:	e018      	b.n	80013aa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001378:	4b5f      	ldr	r3, [pc, #380]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a5e      	ldr	r2, [pc, #376]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 800137e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001382:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001384:	f7ff fa3e 	bl	8000804 <HAL_GetTick>
 8001388:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800138c:	f7ff fa3a 	bl	8000804 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e120      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800139e:	4b56      	ldr	r3, [pc, #344]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 8115 	beq.w	80015de <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	2b18      	cmp	r3, #24
 80013b8:	f000 80af 	beq.w	800151a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	f040 8086 	bne.w	80014d2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80013c6:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80013cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d2:	f7ff fa17 	bl	8000804 <HAL_GetTick>
 80013d6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80013da:	f7ff fa13 	bl	8000804 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e0f9      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80013ec:	4b42      	ldr	r3, [pc, #264]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f0      	bne.n	80013da <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80013f8:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001400:	f023 0303 	bic.w	r3, r3, #3
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800140c:	0212      	lsls	r2, r2, #8
 800140e:	430a      	orrs	r2, r1
 8001410:	4939      	ldr	r1, [pc, #228]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 8001412:	4313      	orrs	r3, r2
 8001414:	628b      	str	r3, [r1, #40]	; 0x28
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141a:	3b01      	subs	r3, #1
 800141c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	3b01      	subs	r3, #1
 8001426:	025b      	lsls	r3, r3, #9
 8001428:	b29b      	uxth	r3, r3
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001430:	3b01      	subs	r3, #1
 8001432:	041b      	lsls	r3, r3, #16
 8001434:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	3b01      	subs	r3, #1
 8001440:	061b      	lsls	r3, r3, #24
 8001442:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001446:	492c      	ldr	r1, [pc, #176]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 8001448:	4313      	orrs	r3, r2
 800144a:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800144c:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 800144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001450:	4a29      	ldr	r2, [pc, #164]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 8001452:	f023 0310 	bic.w	r3, r3, #16
 8001456:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	4a24      	ldr	r2, [pc, #144]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 8001468:	f043 0310 	orr.w	r3, r3, #16
 800146c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	f023 020c 	bic.w	r2, r3, #12
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	491f      	ldr	r1, [pc, #124]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 800147c:	4313      	orrs	r3, r2
 800147e:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001480:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	f023 0220 	bic.w	r2, r3, #32
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148c:	491a      	ldr	r1, [pc, #104]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 800148e:	4313      	orrs	r3, r2
 8001490:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a15      	ldr	r2, [pc, #84]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80014a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014aa:	f7ff f9ab 	bl	8000804 <HAL_GetTick>
 80014ae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80014b2:	f7ff f9a7 	bl	8000804 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e08d      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x736>
 80014d0:	e085      	b.n	80015de <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <HAL_RCC_OscConfig+0x77c>)
 80014d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7ff f991 	bl	8000804 <HAL_GetTick>
 80014e2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80014e4:	e00a      	b.n	80014fc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80014e6:	f7ff f98d 	bl	8000804 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d903      	bls.n	80014fc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e073      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
 80014f8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80014fc:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <HAL_RCC_OscConfig+0x86c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1ee      	bne.n	80014e6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001508:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <HAL_RCC_OscConfig+0x86c>)
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	4a36      	ldr	r2, [pc, #216]	; (80015e8 <HAL_RCC_OscConfig+0x86c>)
 800150e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001512:	f023 0303 	bic.w	r3, r3, #3
 8001516:	6293      	str	r3, [r2, #40]	; 0x28
 8001518:	e061      	b.n	80015de <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800151a:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <HAL_RCC_OscConfig+0x86c>)
 800151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001520:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <HAL_RCC_OscConfig+0x86c>)
 8001522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001524:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	2b01      	cmp	r3, #1
 800152c:	d031      	beq.n	8001592 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	f003 0203 	and.w	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d12a      	bne.n	8001592 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d122      	bne.n	8001592 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001556:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001558:	429a      	cmp	r2, r3
 800155a:	d11a      	bne.n	8001592 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	0a5b      	lsrs	r3, r3, #9
 8001560:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001568:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800156a:	429a      	cmp	r2, r3
 800156c:	d111      	bne.n	8001592 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	0c1b      	lsrs	r3, r3, #16
 8001572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d108      	bne.n	8001592 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	0e1b      	lsrs	r3, r3, #24
 8001584:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800158e:	429a      	cmp	r2, r3
 8001590:	d001      	beq.n	8001596 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e024      	b.n	80015e0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <HAL_RCC_OscConfig+0x86c>)
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	08db      	lsrs	r3, r3, #3
 800159c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d01a      	beq.n	80015de <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_RCC_OscConfig+0x86c>)
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_RCC_OscConfig+0x86c>)
 80015ae:	f023 0310 	bic.w	r3, r3, #16
 80015b2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff f926 	bl	8000804 <HAL_GetTick>
 80015b8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80015ba:	bf00      	nop
 80015bc:	f7ff f922 	bl	8000804 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d0f9      	beq.n	80015bc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_RCC_OscConfig+0x86c>)
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_RCC_OscConfig+0x86c>)
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_RCC_OscConfig+0x86c>)
 80015d8:	f043 0310 	orr.w	r3, r3, #16
 80015dc:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	44020c00 	.word	0x44020c00

080015ec <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e19e      	b.n	800193e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001600:	4b83      	ldr	r3, [pc, #524]	; (8001810 <HAL_RCC_ClockConfig+0x224>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d910      	bls.n	8001630 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b80      	ldr	r3, [pc, #512]	; (8001810 <HAL_RCC_ClockConfig+0x224>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 020f 	bic.w	r2, r3, #15
 8001616:	497e      	ldr	r1, [pc, #504]	; (8001810 <HAL_RCC_ClockConfig+0x224>)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b7c      	ldr	r3, [pc, #496]	; (8001810 <HAL_RCC_ClockConfig+0x224>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e186      	b.n	800193e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b00      	cmp	r3, #0
 800163a:	d012      	beq.n	8001662 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	695a      	ldr	r2, [r3, #20]
 8001640:	4b74      	ldr	r3, [pc, #464]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800164a:	429a      	cmp	r2, r3
 800164c:	d909      	bls.n	8001662 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800164e:	4b71      	ldr	r3, [pc, #452]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	496d      	ldr	r1, [pc, #436]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 800165e:	4313      	orrs	r3, r2
 8001660:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d012      	beq.n	8001694 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	4b68      	ldr	r3, [pc, #416]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	091b      	lsrs	r3, r3, #4
 8001678:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800167c:	429a      	cmp	r2, r3
 800167e:	d909      	bls.n	8001694 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001680:	4b64      	ldr	r3, [pc, #400]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	4961      	ldr	r1, [pc, #388]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 8001690:	4313      	orrs	r3, r2
 8001692:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d010      	beq.n	80016c2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	4b5b      	ldr	r3, [pc, #364]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d908      	bls.n	80016c2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80016b0:	4b58      	ldr	r3, [pc, #352]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4955      	ldr	r1, [pc, #340]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d010      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	4b50      	ldr	r3, [pc, #320]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	429a      	cmp	r2, r3
 80016dc:	d908      	bls.n	80016f0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80016de:	4b4d      	ldr	r3, [pc, #308]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	f023 020f 	bic.w	r2, r3, #15
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	494a      	ldr	r1, [pc, #296]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 8093 	beq.w	8001824 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001706:	4b43      	ldr	r3, [pc, #268]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d121      	bne.n	8001756 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e113      	b.n	800193e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171e:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d115      	bne.n	8001756 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e107      	b.n	800193e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001736:	4b37      	ldr	r3, [pc, #220]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e0fb      	b.n	800193e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001746:	4b33      	ldr	r3, [pc, #204]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e0f3      	b.n	800193e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001756:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f023 0203 	bic.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	492c      	ldr	r1, [pc, #176]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 8001764:	4313      	orrs	r3, r2
 8001766:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001768:	f7ff f84c 	bl	8000804 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d112      	bne.n	800179c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff f844 	bl	8000804 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e0d7      	b.n	800193e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f003 0318 	and.w	r3, r3, #24
 8001796:	2b18      	cmp	r3, #24
 8001798:	d1ee      	bne.n	8001778 <HAL_RCC_ClockConfig+0x18c>
 800179a:	e043      	b.n	8001824 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d112      	bne.n	80017ca <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80017a6:	f7ff f82d 	bl	8000804 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e0c0      	b.n	800193e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	f003 0318 	and.w	r3, r3, #24
 80017c4:	2b10      	cmp	r3, #16
 80017c6:	d1ee      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x1ba>
 80017c8:	e02c      	b.n	8001824 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d122      	bne.n	8001818 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80017d4:	f7ff f816 	bl	8000804 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0a9      	b.n	800193e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_RCC_ClockConfig+0x228>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 0318 	and.w	r3, r3, #24
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d1ee      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x1e8>
 80017f6:	e015      	b.n	8001824 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80017f8:	f7ff f804 	bl	8000804 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d906      	bls.n	8001818 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e097      	b.n	800193e <HAL_RCC_ClockConfig+0x352>
 800180e:	bf00      	nop
 8001810:	40022000 	.word	0x40022000
 8001814:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001818:	4b4b      	ldr	r3, [pc, #300]	; (8001948 <HAL_RCC_ClockConfig+0x35c>)
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	f003 0318 	and.w	r3, r3, #24
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1e9      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d010      	beq.n	8001852 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	4b44      	ldr	r3, [pc, #272]	; (8001948 <HAL_RCC_ClockConfig+0x35c>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	429a      	cmp	r2, r3
 800183e:	d208      	bcs.n	8001852 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001840:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_RCC_ClockConfig+0x35c>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	f023 020f 	bic.w	r2, r3, #15
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	493e      	ldr	r1, [pc, #248]	; (8001948 <HAL_RCC_ClockConfig+0x35c>)
 800184e:	4313      	orrs	r3, r2
 8001850:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001852:	4b3e      	ldr	r3, [pc, #248]	; (800194c <HAL_RCC_ClockConfig+0x360>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d210      	bcs.n	8001882 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001860:	4b3a      	ldr	r3, [pc, #232]	; (800194c <HAL_RCC_ClockConfig+0x360>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 020f 	bic.w	r2, r3, #15
 8001868:	4938      	ldr	r1, [pc, #224]	; (800194c <HAL_RCC_ClockConfig+0x360>)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001870:	4b36      	ldr	r3, [pc, #216]	; (800194c <HAL_RCC_ClockConfig+0x360>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d001      	beq.n	8001882 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e05d      	b.n	800193e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	2b00      	cmp	r3, #0
 800188c:	d010      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <HAL_RCC_ClockConfig+0x35c>)
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800189a:	429a      	cmp	r2, r3
 800189c:	d208      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <HAL_RCC_ClockConfig+0x35c>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	4927      	ldr	r1, [pc, #156]	; (8001948 <HAL_RCC_ClockConfig+0x35c>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d012      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <HAL_RCC_ClockConfig+0x35c>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d209      	bcs.n	80018e2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_RCC_ClockConfig+0x35c>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	491a      	ldr	r1, [pc, #104]	; (8001948 <HAL_RCC_ClockConfig+0x35c>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d012      	beq.n	8001914 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_RCC_ClockConfig+0x35c>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d209      	bcs.n	8001914 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_RCC_ClockConfig+0x35c>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	490e      	ldr	r1, [pc, #56]	; (8001948 <HAL_RCC_ClockConfig+0x35c>)
 8001910:	4313      	orrs	r3, r2
 8001912:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001914:	f000 f822 	bl	800195c <HAL_RCC_GetSysClockFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_ClockConfig+0x35c>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	490b      	ldr	r1, [pc, #44]	; (8001950 <HAL_RCC_ClockConfig+0x364>)
 8001924:	5ccb      	ldrb	r3, [r1, r3]
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_RCC_ClockConfig+0x368>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x36c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe ff1c 	bl	8000770 <HAL_InitTick>
 8001938:	4603      	mov	r3, r0
 800193a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800193c:	7afb      	ldrb	r3, [r7, #11]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	44020c00 	.word	0x44020c00
 800194c:	40022000 	.word	0x40022000
 8001950:	080031fc 	.word	0x080031fc
 8001954:	20000000 	.word	0x20000000
 8001958:	20000004 	.word	0x20000004

0800195c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001962:	4b8c      	ldr	r3, [pc, #560]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 0318 	and.w	r3, r3, #24
 800196a:	2b08      	cmp	r3, #8
 800196c:	d102      	bne.n	8001974 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800196e:	4b8a      	ldr	r3, [pc, #552]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x23c>)
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e107      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001974:	4b87      	ldr	r3, [pc, #540]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	f003 0318 	and.w	r3, r3, #24
 800197c:	2b00      	cmp	r3, #0
 800197e:	d112      	bne.n	80019a6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001980:	4b84      	ldr	r3, [pc, #528]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b00      	cmp	r3, #0
 800198a:	d009      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800198c:	4b81      	ldr	r3, [pc, #516]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	08db      	lsrs	r3, r3, #3
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	4a81      	ldr	r2, [pc, #516]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x240>)
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	e0f1      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80019a0:	4b7e      	ldr	r3, [pc, #504]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x240>)
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	e0ee      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a6:	4b7b      	ldr	r3, [pc, #492]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 0318 	and.w	r3, r3, #24
 80019ae:	2b10      	cmp	r3, #16
 80019b0:	d102      	bne.n	80019b8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019b2:	4b7b      	ldr	r3, [pc, #492]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x244>)
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e0e5      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b8:	4b76      	ldr	r3, [pc, #472]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	f003 0318 	and.w	r3, r3, #24
 80019c0:	2b18      	cmp	r3, #24
 80019c2:	f040 80dd 	bne.w	8001b80 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80019c6:	4b73      	ldr	r3, [pc, #460]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80019d0:	4b70      	ldr	r3, [pc, #448]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80019dc:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80019e8:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 80019ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80019ec:	08db      	lsrs	r3, r3, #3
 80019ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a00:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80b7 	beq.w	8001b7a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d003      	beq.n	8001a1a <HAL_RCC_GetSysClockFreq+0xbe>
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d056      	beq.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x16a>
 8001a18:	e077      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001a1a:	4b5e      	ldr	r3, [pc, #376]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d02d      	beq.n	8001a82 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001a26:	4b5b      	ldr	r3, [pc, #364]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	08db      	lsrs	r3, r3, #3
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	4a5a      	ldr	r2, [pc, #360]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x240>)
 8001a32:	fa22 f303 	lsr.w	r3, r2, r3
 8001a36:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a50:	4b50      	ldr	r3, [pc, #320]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a58:	ee07 3a90 	vmov	s15, r3
 8001a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a60:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a64:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001ba4 <HAL_RCC_GetSysClockFreq+0x248>
 8001a68:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001a6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a74:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8001a80:	e065      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	ee07 3a90 	vmov	s15, r3
 8001a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a8c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001ba8 <HAL_RCC_GetSysClockFreq+0x24c>
 8001a90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a94:	4b3f      	ldr	r3, [pc, #252]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001aa4:	ed97 6a02 	vldr	s12, [r7, #8]
 8001aa8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001ba4 <HAL_RCC_GetSysClockFreq+0x248>
 8001aac:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ab0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ab4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001ac4:	e043      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad0:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001bac <HAL_RCC_GetSysClockFreq+0x250>
 8001ad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8001ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ae8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001aec:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001ba4 <HAL_RCC_GetSysClockFreq+0x248>
 8001af0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001af4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001af8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b04:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8001b08:	e021      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b14:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001bb0 <HAL_RCC_GetSysClockFreq+0x254>
 8001b18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8001b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b24:	ee07 3a90 	vmov	s15, r3
 8001b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b30:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001ba4 <HAL_RCC_GetSysClockFreq+0x248>
 8001b34:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b40:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b48:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001b4c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8001b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b52:	0a5b      	lsrs	r3, r3, #9
 8001b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b58:	3301      	adds	r3, #1
 8001b5a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	ee07 3a90 	vmov	s15, r3
 8001b62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b66:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b72:	ee17 3a90 	vmov	r3, s15
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	e004      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e001      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x240>)
 8001b82:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8001b84:	69fb      	ldr	r3, [r7, #28]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	44020c00 	.word	0x44020c00
 8001b98:	003d0900 	.word	0x003d0900
 8001b9c:	03d09000 	.word	0x03d09000
 8001ba0:	017d7840 	.word	0x017d7840
 8001ba4:	46000000 	.word	0x46000000
 8001ba8:	4c742400 	.word	0x4c742400
 8001bac:	4bbebc20 	.word	0x4bbebc20
 8001bb0:	4a742400 	.word	0x4a742400

08001bb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001bb8:	f7ff fed0 	bl	800195c <HAL_RCC_GetSysClockFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001bc2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001bc6:	4907      	ldr	r1, [pc, #28]	; (8001be4 <HAL_RCC_GetHCLKFreq+0x30>)
 8001bc8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001bca:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <HAL_RCC_GetHCLKFreq+0x34>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_RCC_GetHCLKFreq+0x34>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	44020c00 	.word	0x44020c00
 8001be4:	080031fc 	.word	0x080031fc
 8001be8:	20000000 	.word	0x20000000

08001bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e049      	b.n	8001c92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7fe fc94 	bl	8000540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3304      	adds	r3, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f000 fc28 	bl	8002480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e049      	b.n	8001d40 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d106      	bne.n	8001cc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f841 	bl	8001d48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4610      	mov	r0, r2
 8001cda:	f000 fbd1 	bl	8002480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d109      	bne.n	8001d80 <HAL_TIM_PWM_Start+0x24>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	bf14      	ite	ne
 8001d78:	2301      	movne	r3, #1
 8001d7a:	2300      	moveq	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	e03c      	b.n	8001dfa <HAL_TIM_PWM_Start+0x9e>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d109      	bne.n	8001d9a <HAL_TIM_PWM_Start+0x3e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	bf14      	ite	ne
 8001d92:	2301      	movne	r3, #1
 8001d94:	2300      	moveq	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	e02f      	b.n	8001dfa <HAL_TIM_PWM_Start+0x9e>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d109      	bne.n	8001db4 <HAL_TIM_PWM_Start+0x58>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	bf14      	ite	ne
 8001dac:	2301      	movne	r3, #1
 8001dae:	2300      	moveq	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	e022      	b.n	8001dfa <HAL_TIM_PWM_Start+0x9e>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d109      	bne.n	8001dce <HAL_TIM_PWM_Start+0x72>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	bf14      	ite	ne
 8001dc6:	2301      	movne	r3, #1
 8001dc8:	2300      	moveq	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	e015      	b.n	8001dfa <HAL_TIM_PWM_Start+0x9e>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d109      	bne.n	8001de8 <HAL_TIM_PWM_Start+0x8c>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	bf14      	ite	ne
 8001de0:	2301      	movne	r3, #1
 8001de2:	2300      	moveq	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	e008      	b.n	8001dfa <HAL_TIM_PWM_Start+0x9e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	bf14      	ite	ne
 8001df4:	2301      	movne	r3, #1
 8001df6:	2300      	moveq	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0e2      	b.n	8001fc8 <HAL_TIM_PWM_Start+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d104      	bne.n	8001e12 <HAL_TIM_PWM_Start+0xb6>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e10:	e023      	b.n	8001e5a <HAL_TIM_PWM_Start+0xfe>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d104      	bne.n	8001e22 <HAL_TIM_PWM_Start+0xc6>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e20:	e01b      	b.n	8001e5a <HAL_TIM_PWM_Start+0xfe>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d104      	bne.n	8001e32 <HAL_TIM_PWM_Start+0xd6>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e30:	e013      	b.n	8001e5a <HAL_TIM_PWM_Start+0xfe>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b0c      	cmp	r3, #12
 8001e36:	d104      	bne.n	8001e42 <HAL_TIM_PWM_Start+0xe6>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e40:	e00b      	b.n	8001e5a <HAL_TIM_PWM_Start+0xfe>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b10      	cmp	r3, #16
 8001e46:	d104      	bne.n	8001e52 <HAL_TIM_PWM_Start+0xf6>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e50:	e003      	b.n	8001e5a <HAL_TIM_PWM_Start+0xfe>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	6839      	ldr	r1, [r7, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f001 f89c 	bl	8002fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_TIM_PWM_Start+0x274>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d02c      	beq.n	8001ecc <HAL_TIM_PWM_Start+0x170>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a57      	ldr	r2, [pc, #348]	; (8001fd4 <HAL_TIM_PWM_Start+0x278>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d027      	beq.n	8001ecc <HAL_TIM_PWM_Start+0x170>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a55      	ldr	r2, [pc, #340]	; (8001fd8 <HAL_TIM_PWM_Start+0x27c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d022      	beq.n	8001ecc <HAL_TIM_PWM_Start+0x170>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a54      	ldr	r2, [pc, #336]	; (8001fdc <HAL_TIM_PWM_Start+0x280>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d01d      	beq.n	8001ecc <HAL_TIM_PWM_Start+0x170>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <HAL_TIM_PWM_Start+0x284>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d018      	beq.n	8001ecc <HAL_TIM_PWM_Start+0x170>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a51      	ldr	r2, [pc, #324]	; (8001fe4 <HAL_TIM_PWM_Start+0x288>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <HAL_TIM_PWM_Start+0x170>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a4f      	ldr	r2, [pc, #316]	; (8001fe8 <HAL_TIM_PWM_Start+0x28c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00e      	beq.n	8001ecc <HAL_TIM_PWM_Start+0x170>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a4e      	ldr	r2, [pc, #312]	; (8001fec <HAL_TIM_PWM_Start+0x290>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_TIM_PWM_Start+0x170>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a4c      	ldr	r2, [pc, #304]	; (8001ff0 <HAL_TIM_PWM_Start+0x294>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d004      	beq.n	8001ecc <HAL_TIM_PWM_Start+0x170>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a4b      	ldr	r2, [pc, #300]	; (8001ff4 <HAL_TIM_PWM_Start+0x298>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d101      	bne.n	8001ed0 <HAL_TIM_PWM_Start+0x174>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_TIM_PWM_Start+0x176>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a39      	ldr	r2, [pc, #228]	; (8001fd0 <HAL_TIM_PWM_Start+0x274>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d04a      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a37      	ldr	r2, [pc, #220]	; (8001fd4 <HAL_TIM_PWM_Start+0x278>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d045      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f02:	d040      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f0c:	d03b      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a39      	ldr	r2, [pc, #228]	; (8001ff8 <HAL_TIM_PWM_Start+0x29c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d036      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a37      	ldr	r2, [pc, #220]	; (8001ffc <HAL_TIM_PWM_Start+0x2a0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d031      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a36      	ldr	r2, [pc, #216]	; (8002000 <HAL_TIM_PWM_Start+0x2a4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d02c      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a34      	ldr	r2, [pc, #208]	; (8002004 <HAL_TIM_PWM_Start+0x2a8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d027      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a33      	ldr	r2, [pc, #204]	; (8002008 <HAL_TIM_PWM_Start+0x2ac>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d022      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a31      	ldr	r2, [pc, #196]	; (800200c <HAL_TIM_PWM_Start+0x2b0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01d      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a22      	ldr	r2, [pc, #136]	; (8001fd8 <HAL_TIM_PWM_Start+0x27c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d018      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a20      	ldr	r2, [pc, #128]	; (8001fdc <HAL_TIM_PWM_Start+0x280>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <HAL_TIM_PWM_Start+0x2b4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00e      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a29      	ldr	r2, [pc, #164]	; (8002014 <HAL_TIM_PWM_Start+0x2b8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d009      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <HAL_TIM_PWM_Start+0x284>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d004      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x22a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <HAL_TIM_PWM_Start+0x288>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d115      	bne.n	8001fb2 <HAL_TIM_PWM_Start+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	4b22      	ldr	r3, [pc, #136]	; (8002018 <HAL_TIM_PWM_Start+0x2bc>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b06      	cmp	r3, #6
 8001f96:	d015      	beq.n	8001fc4 <HAL_TIM_PWM_Start+0x268>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9e:	d011      	beq.n	8001fc4 <HAL_TIM_PWM_Start+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0201 	orr.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb0:	e008      	b.n	8001fc4 <HAL_TIM_PWM_Start+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0201 	orr.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	e000      	b.n	8001fc6 <HAL_TIM_PWM_Start+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	50012c00 	.word	0x50012c00
 8001fd8:	40013400 	.word	0x40013400
 8001fdc:	50013400 	.word	0x50013400
 8001fe0:	40014000 	.word	0x40014000
 8001fe4:	50014000 	.word	0x50014000
 8001fe8:	40014400 	.word	0x40014400
 8001fec:	50014400 	.word	0x50014400
 8001ff0:	40014800 	.word	0x40014800
 8001ff4:	50014800 	.word	0x50014800
 8001ff8:	40000400 	.word	0x40000400
 8001ffc:	50000400 	.word	0x50000400
 8002000:	40000800 	.word	0x40000800
 8002004:	50000800 	.word	0x50000800
 8002008:	40000c00 	.word	0x40000c00
 800200c:	50000c00 	.word	0x50000c00
 8002010:	40001800 	.word	0x40001800
 8002014:	50001800 	.word	0x50001800
 8002018:	00010007 	.word	0x00010007

0800201c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002036:	2302      	movs	r3, #2
 8002038:	e0ff      	b.n	800223a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b14      	cmp	r3, #20
 8002046:	f200 80f0 	bhi.w	800222a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800204a:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800204c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002050:	080020a5 	.word	0x080020a5
 8002054:	0800222b 	.word	0x0800222b
 8002058:	0800222b 	.word	0x0800222b
 800205c:	0800222b 	.word	0x0800222b
 8002060:	080020e5 	.word	0x080020e5
 8002064:	0800222b 	.word	0x0800222b
 8002068:	0800222b 	.word	0x0800222b
 800206c:	0800222b 	.word	0x0800222b
 8002070:	08002127 	.word	0x08002127
 8002074:	0800222b 	.word	0x0800222b
 8002078:	0800222b 	.word	0x0800222b
 800207c:	0800222b 	.word	0x0800222b
 8002080:	08002167 	.word	0x08002167
 8002084:	0800222b 	.word	0x0800222b
 8002088:	0800222b 	.word	0x0800222b
 800208c:	0800222b 	.word	0x0800222b
 8002090:	080021a9 	.word	0x080021a9
 8002094:	0800222b 	.word	0x0800222b
 8002098:	0800222b 	.word	0x0800222b
 800209c:	0800222b 	.word	0x0800222b
 80020a0:	080021e9 	.word	0x080021e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fb06 	bl	80026bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699a      	ldr	r2, [r3, #24]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0208 	orr.w	r2, r2, #8
 80020be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0204 	bic.w	r2, r2, #4
 80020ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6999      	ldr	r1, [r3, #24]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	619a      	str	r2, [r3, #24]
      break;
 80020e2:	e0a5      	b.n	8002230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 fba8 	bl	8002840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699a      	ldr	r2, [r3, #24]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800210e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6999      	ldr	r1, [r3, #24]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	021a      	lsls	r2, r3, #8
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	619a      	str	r2, [r3, #24]
      break;
 8002124:	e084      	b.n	8002230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68b9      	ldr	r1, [r7, #8]
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fc37 	bl	80029a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	69da      	ldr	r2, [r3, #28]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0208 	orr.w	r2, r2, #8
 8002140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0204 	bic.w	r2, r2, #4
 8002150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69d9      	ldr	r1, [r3, #28]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	61da      	str	r2, [r3, #28]
      break;
 8002164:	e064      	b.n	8002230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68b9      	ldr	r1, [r7, #8]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fcc5 	bl	8002afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	69d9      	ldr	r1, [r3, #28]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	021a      	lsls	r2, r3, #8
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	61da      	str	r2, [r3, #28]
      break;
 80021a6:	e043      	b.n	8002230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fd54 	bl	8002c5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0208 	orr.w	r2, r2, #8
 80021c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0204 	bic.w	r2, r2, #4
 80021d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80021e6:	e023      	b.n	8002230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fdb6 	bl	8002d60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002202:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002212:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	021a      	lsls	r2, r3, #8
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002228:	e002      	b.n	8002230 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
      break;
 800222e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002238:	7dfb      	ldrb	r3, [r7, #23]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop

08002244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_TIM_ConfigClockSource+0x1c>
 800225c:	2302      	movs	r3, #2
 800225e:	e0fe      	b.n	800245e <HAL_TIM_ConfigClockSource+0x21a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800227e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800228a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800229c:	f000 80c9 	beq.w	8002432 <HAL_TIM_ConfigClockSource+0x1ee>
 80022a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022a4:	f200 80ce 	bhi.w	8002444 <HAL_TIM_ConfigClockSource+0x200>
 80022a8:	4a6f      	ldr	r2, [pc, #444]	; (8002468 <HAL_TIM_ConfigClockSource+0x224>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	f000 80c1 	beq.w	8002432 <HAL_TIM_ConfigClockSource+0x1ee>
 80022b0:	4a6d      	ldr	r2, [pc, #436]	; (8002468 <HAL_TIM_ConfigClockSource+0x224>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	f200 80c6 	bhi.w	8002444 <HAL_TIM_ConfigClockSource+0x200>
 80022b8:	4a6c      	ldr	r2, [pc, #432]	; (800246c <HAL_TIM_ConfigClockSource+0x228>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	f000 80b9 	beq.w	8002432 <HAL_TIM_ConfigClockSource+0x1ee>
 80022c0:	4a6a      	ldr	r2, [pc, #424]	; (800246c <HAL_TIM_ConfigClockSource+0x228>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	f200 80be 	bhi.w	8002444 <HAL_TIM_ConfigClockSource+0x200>
 80022c8:	4a69      	ldr	r2, [pc, #420]	; (8002470 <HAL_TIM_ConfigClockSource+0x22c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	f000 80b1 	beq.w	8002432 <HAL_TIM_ConfigClockSource+0x1ee>
 80022d0:	4a67      	ldr	r2, [pc, #412]	; (8002470 <HAL_TIM_ConfigClockSource+0x22c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	f200 80b6 	bhi.w	8002444 <HAL_TIM_ConfigClockSource+0x200>
 80022d8:	4a66      	ldr	r2, [pc, #408]	; (8002474 <HAL_TIM_ConfigClockSource+0x230>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	f000 80a9 	beq.w	8002432 <HAL_TIM_ConfigClockSource+0x1ee>
 80022e0:	4a64      	ldr	r2, [pc, #400]	; (8002474 <HAL_TIM_ConfigClockSource+0x230>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	f200 80ae 	bhi.w	8002444 <HAL_TIM_ConfigClockSource+0x200>
 80022e8:	4a63      	ldr	r2, [pc, #396]	; (8002478 <HAL_TIM_ConfigClockSource+0x234>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	f000 80a1 	beq.w	8002432 <HAL_TIM_ConfigClockSource+0x1ee>
 80022f0:	4a61      	ldr	r2, [pc, #388]	; (8002478 <HAL_TIM_ConfigClockSource+0x234>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	f200 80a6 	bhi.w	8002444 <HAL_TIM_ConfigClockSource+0x200>
 80022f8:	4a60      	ldr	r2, [pc, #384]	; (800247c <HAL_TIM_ConfigClockSource+0x238>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	f000 8099 	beq.w	8002432 <HAL_TIM_ConfigClockSource+0x1ee>
 8002300:	4a5e      	ldr	r2, [pc, #376]	; (800247c <HAL_TIM_ConfigClockSource+0x238>)
 8002302:	4293      	cmp	r3, r2
 8002304:	f200 809e 	bhi.w	8002444 <HAL_TIM_ConfigClockSource+0x200>
 8002308:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800230c:	f000 8091 	beq.w	8002432 <HAL_TIM_ConfigClockSource+0x1ee>
 8002310:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002314:	f200 8096 	bhi.w	8002444 <HAL_TIM_ConfigClockSource+0x200>
 8002318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800231c:	f000 8089 	beq.w	8002432 <HAL_TIM_ConfigClockSource+0x1ee>
 8002320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002324:	f200 808e 	bhi.w	8002444 <HAL_TIM_ConfigClockSource+0x200>
 8002328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800232c:	d03e      	beq.n	80023ac <HAL_TIM_ConfigClockSource+0x168>
 800232e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002332:	f200 8087 	bhi.w	8002444 <HAL_TIM_ConfigClockSource+0x200>
 8002336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233a:	f000 8086 	beq.w	800244a <HAL_TIM_ConfigClockSource+0x206>
 800233e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002342:	d87f      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x200>
 8002344:	2b70      	cmp	r3, #112	; 0x70
 8002346:	d01a      	beq.n	800237e <HAL_TIM_ConfigClockSource+0x13a>
 8002348:	2b70      	cmp	r3, #112	; 0x70
 800234a:	d87b      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x200>
 800234c:	2b60      	cmp	r3, #96	; 0x60
 800234e:	d050      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002350:	2b60      	cmp	r3, #96	; 0x60
 8002352:	d877      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x200>
 8002354:	2b50      	cmp	r3, #80	; 0x50
 8002356:	d03c      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x18e>
 8002358:	2b50      	cmp	r3, #80	; 0x50
 800235a:	d873      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x200>
 800235c:	2b40      	cmp	r3, #64	; 0x40
 800235e:	d058      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0x1ce>
 8002360:	2b40      	cmp	r3, #64	; 0x40
 8002362:	d86f      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x200>
 8002364:	2b30      	cmp	r3, #48	; 0x30
 8002366:	d064      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0x1ee>
 8002368:	2b30      	cmp	r3, #48	; 0x30
 800236a:	d86b      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x200>
 800236c:	2b20      	cmp	r3, #32
 800236e:	d060      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0x1ee>
 8002370:	2b20      	cmp	r3, #32
 8002372:	d867      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x200>
 8002374:	2b00      	cmp	r3, #0
 8002376:	d05c      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0x1ee>
 8002378:	2b10      	cmp	r3, #16
 800237a:	d05a      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0x1ee>
 800237c:	e062      	b.n	8002444 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800238e:	f000 fde7 	bl	8002f60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	609a      	str	r2, [r3, #8]
      break;
 80023aa:	e04f      	b.n	800244c <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023bc:	f000 fdd0 	bl	8002f60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ce:	609a      	str	r2, [r3, #8]
      break;
 80023d0:	e03c      	b.n	800244c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023de:	461a      	mov	r2, r3
 80023e0:	f000 fd42 	bl	8002e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2150      	movs	r1, #80	; 0x50
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fd9b 	bl	8002f26 <TIM_ITRx_SetConfig>
      break;
 80023f0:	e02c      	b.n	800244c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023fe:	461a      	mov	r2, r3
 8002400:	f000 fd61 	bl	8002ec6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2160      	movs	r1, #96	; 0x60
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fd8b 	bl	8002f26 <TIM_ITRx_SetConfig>
      break;
 8002410:	e01c      	b.n	800244c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800241e:	461a      	mov	r2, r3
 8002420:	f000 fd22 	bl	8002e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2140      	movs	r1, #64	; 0x40
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fd7b 	bl	8002f26 <TIM_ITRx_SetConfig>
      break;
 8002430:	e00c      	b.n	800244c <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4619      	mov	r1, r3
 800243c:	4610      	mov	r0, r2
 800243e:	f000 fd72 	bl	8002f26 <TIM_ITRx_SetConfig>
      break;
 8002442:	e003      	b.n	800244c <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
      break;
 8002448:	e000      	b.n	800244c <HAL_TIM_ConfigClockSource+0x208>
      break;
 800244a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	00100070 	.word	0x00100070
 800246c:	00100060 	.word	0x00100060
 8002470:	00100050 	.word	0x00100050
 8002474:	00100040 	.word	0x00100040
 8002478:	00100030 	.word	0x00100030
 800247c:	00100020 	.word	0x00100020

08002480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a74      	ldr	r2, [pc, #464]	; (8002664 <TIM_Base_SetConfig+0x1e4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d02b      	beq.n	80024f0 <TIM_Base_SetConfig+0x70>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a73      	ldr	r2, [pc, #460]	; (8002668 <TIM_Base_SetConfig+0x1e8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d027      	beq.n	80024f0 <TIM_Base_SetConfig+0x70>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a6:	d023      	beq.n	80024f0 <TIM_Base_SetConfig+0x70>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ae:	d01f      	beq.n	80024f0 <TIM_Base_SetConfig+0x70>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a6e      	ldr	r2, [pc, #440]	; (800266c <TIM_Base_SetConfig+0x1ec>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d01b      	beq.n	80024f0 <TIM_Base_SetConfig+0x70>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a6d      	ldr	r2, [pc, #436]	; (8002670 <TIM_Base_SetConfig+0x1f0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d017      	beq.n	80024f0 <TIM_Base_SetConfig+0x70>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a6c      	ldr	r2, [pc, #432]	; (8002674 <TIM_Base_SetConfig+0x1f4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <TIM_Base_SetConfig+0x70>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a6b      	ldr	r2, [pc, #428]	; (8002678 <TIM_Base_SetConfig+0x1f8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00f      	beq.n	80024f0 <TIM_Base_SetConfig+0x70>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a6a      	ldr	r2, [pc, #424]	; (800267c <TIM_Base_SetConfig+0x1fc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00b      	beq.n	80024f0 <TIM_Base_SetConfig+0x70>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a69      	ldr	r2, [pc, #420]	; (8002680 <TIM_Base_SetConfig+0x200>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d007      	beq.n	80024f0 <TIM_Base_SetConfig+0x70>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a68      	ldr	r2, [pc, #416]	; (8002684 <TIM_Base_SetConfig+0x204>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <TIM_Base_SetConfig+0x70>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a67      	ldr	r2, [pc, #412]	; (8002688 <TIM_Base_SetConfig+0x208>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d108      	bne.n	8002502 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a57      	ldr	r2, [pc, #348]	; (8002664 <TIM_Base_SetConfig+0x1e4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d05b      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a56      	ldr	r2, [pc, #344]	; (8002668 <TIM_Base_SetConfig+0x1e8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d057      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002518:	d053      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002520:	d04f      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a51      	ldr	r2, [pc, #324]	; (800266c <TIM_Base_SetConfig+0x1ec>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d04b      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a50      	ldr	r2, [pc, #320]	; (8002670 <TIM_Base_SetConfig+0x1f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d047      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4f      	ldr	r2, [pc, #316]	; (8002674 <TIM_Base_SetConfig+0x1f4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d043      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4e      	ldr	r2, [pc, #312]	; (8002678 <TIM_Base_SetConfig+0x1f8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d03f      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4d      	ldr	r2, [pc, #308]	; (800267c <TIM_Base_SetConfig+0x1fc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d03b      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4c      	ldr	r2, [pc, #304]	; (8002680 <TIM_Base_SetConfig+0x200>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d037      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4b      	ldr	r2, [pc, #300]	; (8002684 <TIM_Base_SetConfig+0x204>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d033      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4a      	ldr	r2, [pc, #296]	; (8002688 <TIM_Base_SetConfig+0x208>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d02f      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a49      	ldr	r2, [pc, #292]	; (800268c <TIM_Base_SetConfig+0x20c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d02b      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a48      	ldr	r2, [pc, #288]	; (8002690 <TIM_Base_SetConfig+0x210>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d027      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a47      	ldr	r2, [pc, #284]	; (8002694 <TIM_Base_SetConfig+0x214>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d023      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a46      	ldr	r2, [pc, #280]	; (8002698 <TIM_Base_SetConfig+0x218>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01f      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a45      	ldr	r2, [pc, #276]	; (800269c <TIM_Base_SetConfig+0x21c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01b      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a44      	ldr	r2, [pc, #272]	; (80026a0 <TIM_Base_SetConfig+0x220>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d017      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a43      	ldr	r2, [pc, #268]	; (80026a4 <TIM_Base_SetConfig+0x224>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a42      	ldr	r2, [pc, #264]	; (80026a8 <TIM_Base_SetConfig+0x228>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00f      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a41      	ldr	r2, [pc, #260]	; (80026ac <TIM_Base_SetConfig+0x22c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00b      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a40      	ldr	r2, [pc, #256]	; (80026b0 <TIM_Base_SetConfig+0x230>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d007      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a3f      	ldr	r2, [pc, #252]	; (80026b4 <TIM_Base_SetConfig+0x234>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d003      	beq.n	80025c2 <TIM_Base_SetConfig+0x142>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a3e      	ldr	r2, [pc, #248]	; (80026b8 <TIM_Base_SetConfig+0x238>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d108      	bne.n	80025d4 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a1a      	ldr	r2, [pc, #104]	; (8002664 <TIM_Base_SetConfig+0x1e4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d023      	beq.n	8002648 <TIM_Base_SetConfig+0x1c8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a19      	ldr	r2, [pc, #100]	; (8002668 <TIM_Base_SetConfig+0x1e8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d01f      	beq.n	8002648 <TIM_Base_SetConfig+0x1c8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <TIM_Base_SetConfig+0x204>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d01b      	beq.n	8002648 <TIM_Base_SetConfig+0x1c8>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <TIM_Base_SetConfig+0x208>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d017      	beq.n	8002648 <TIM_Base_SetConfig+0x1c8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <TIM_Base_SetConfig+0x224>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d013      	beq.n	8002648 <TIM_Base_SetConfig+0x1c8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a21      	ldr	r2, [pc, #132]	; (80026a8 <TIM_Base_SetConfig+0x228>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00f      	beq.n	8002648 <TIM_Base_SetConfig+0x1c8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a20      	ldr	r2, [pc, #128]	; (80026ac <TIM_Base_SetConfig+0x22c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d00b      	beq.n	8002648 <TIM_Base_SetConfig+0x1c8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a1f      	ldr	r2, [pc, #124]	; (80026b0 <TIM_Base_SetConfig+0x230>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d007      	beq.n	8002648 <TIM_Base_SetConfig+0x1c8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <TIM_Base_SetConfig+0x234>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d003      	beq.n	8002648 <TIM_Base_SetConfig+0x1c8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <TIM_Base_SetConfig+0x238>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d103      	bne.n	8002650 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	615a      	str	r2, [r3, #20]
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40012c00 	.word	0x40012c00
 8002668:	50012c00 	.word	0x50012c00
 800266c:	40000400 	.word	0x40000400
 8002670:	50000400 	.word	0x50000400
 8002674:	40000800 	.word	0x40000800
 8002678:	50000800 	.word	0x50000800
 800267c:	40000c00 	.word	0x40000c00
 8002680:	50000c00 	.word	0x50000c00
 8002684:	40013400 	.word	0x40013400
 8002688:	50013400 	.word	0x50013400
 800268c:	40001800 	.word	0x40001800
 8002690:	50001800 	.word	0x50001800
 8002694:	40001c00 	.word	0x40001c00
 8002698:	50001c00 	.word	0x50001c00
 800269c:	40002000 	.word	0x40002000
 80026a0:	50002000 	.word	0x50002000
 80026a4:	40014000 	.word	0x40014000
 80026a8:	50014000 	.word	0x50014000
 80026ac:	40014400 	.word	0x40014400
 80026b0:	50014400 	.word	0x50014400
 80026b4:	40014800 	.word	0x40014800
 80026b8:	50014800 	.word	0x50014800

080026bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	f023 0201 	bic.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f023 0302 	bic.w	r3, r3, #2
 8002708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a40      	ldr	r2, [pc, #256]	; (8002818 <TIM_OC1_SetConfig+0x15c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d023      	beq.n	8002764 <TIM_OC1_SetConfig+0xa8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a3f      	ldr	r2, [pc, #252]	; (800281c <TIM_OC1_SetConfig+0x160>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d01f      	beq.n	8002764 <TIM_OC1_SetConfig+0xa8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a3e      	ldr	r2, [pc, #248]	; (8002820 <TIM_OC1_SetConfig+0x164>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d01b      	beq.n	8002764 <TIM_OC1_SetConfig+0xa8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a3d      	ldr	r2, [pc, #244]	; (8002824 <TIM_OC1_SetConfig+0x168>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d017      	beq.n	8002764 <TIM_OC1_SetConfig+0xa8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a3c      	ldr	r2, [pc, #240]	; (8002828 <TIM_OC1_SetConfig+0x16c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d013      	beq.n	8002764 <TIM_OC1_SetConfig+0xa8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a3b      	ldr	r2, [pc, #236]	; (800282c <TIM_OC1_SetConfig+0x170>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00f      	beq.n	8002764 <TIM_OC1_SetConfig+0xa8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a3a      	ldr	r2, [pc, #232]	; (8002830 <TIM_OC1_SetConfig+0x174>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00b      	beq.n	8002764 <TIM_OC1_SetConfig+0xa8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a39      	ldr	r2, [pc, #228]	; (8002834 <TIM_OC1_SetConfig+0x178>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d007      	beq.n	8002764 <TIM_OC1_SetConfig+0xa8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a38      	ldr	r2, [pc, #224]	; (8002838 <TIM_OC1_SetConfig+0x17c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d003      	beq.n	8002764 <TIM_OC1_SetConfig+0xa8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a37      	ldr	r2, [pc, #220]	; (800283c <TIM_OC1_SetConfig+0x180>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d10c      	bne.n	800277e <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0308 	bic.w	r3, r3, #8
 800276a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a25      	ldr	r2, [pc, #148]	; (8002818 <TIM_OC1_SetConfig+0x15c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d023      	beq.n	80027ce <TIM_OC1_SetConfig+0x112>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a24      	ldr	r2, [pc, #144]	; (800281c <TIM_OC1_SetConfig+0x160>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d01f      	beq.n	80027ce <TIM_OC1_SetConfig+0x112>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a23      	ldr	r2, [pc, #140]	; (8002820 <TIM_OC1_SetConfig+0x164>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d01b      	beq.n	80027ce <TIM_OC1_SetConfig+0x112>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a22      	ldr	r2, [pc, #136]	; (8002824 <TIM_OC1_SetConfig+0x168>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d017      	beq.n	80027ce <TIM_OC1_SetConfig+0x112>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a21      	ldr	r2, [pc, #132]	; (8002828 <TIM_OC1_SetConfig+0x16c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <TIM_OC1_SetConfig+0x112>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a20      	ldr	r2, [pc, #128]	; (800282c <TIM_OC1_SetConfig+0x170>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00f      	beq.n	80027ce <TIM_OC1_SetConfig+0x112>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <TIM_OC1_SetConfig+0x174>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00b      	beq.n	80027ce <TIM_OC1_SetConfig+0x112>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <TIM_OC1_SetConfig+0x178>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <TIM_OC1_SetConfig+0x112>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <TIM_OC1_SetConfig+0x17c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d003      	beq.n	80027ce <TIM_OC1_SetConfig+0x112>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a1c      	ldr	r2, [pc, #112]	; (800283c <TIM_OC1_SetConfig+0x180>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d111      	bne.n	80027f2 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	621a      	str	r2, [r3, #32]
}
 800280c:	bf00      	nop
 800280e:	371c      	adds	r7, #28
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40012c00 	.word	0x40012c00
 800281c:	50012c00 	.word	0x50012c00
 8002820:	40013400 	.word	0x40013400
 8002824:	50013400 	.word	0x50013400
 8002828:	40014000 	.word	0x40014000
 800282c:	50014000 	.word	0x50014000
 8002830:	40014400 	.word	0x40014400
 8002834:	50014400 	.word	0x50014400
 8002838:	40014800 	.word	0x40014800
 800283c:	50014800 	.word	0x50014800

08002840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f023 0210 	bic.w	r2, r3, #16
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f023 0320 	bic.w	r3, r3, #32
 800288e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a36      	ldr	r2, [pc, #216]	; (8002978 <TIM_OC2_SetConfig+0x138>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00b      	beq.n	80028bc <TIM_OC2_SetConfig+0x7c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a35      	ldr	r2, [pc, #212]	; (800297c <TIM_OC2_SetConfig+0x13c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d007      	beq.n	80028bc <TIM_OC2_SetConfig+0x7c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a34      	ldr	r2, [pc, #208]	; (8002980 <TIM_OC2_SetConfig+0x140>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d003      	beq.n	80028bc <TIM_OC2_SetConfig+0x7c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a33      	ldr	r2, [pc, #204]	; (8002984 <TIM_OC2_SetConfig+0x144>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d10d      	bne.n	80028d8 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a27      	ldr	r2, [pc, #156]	; (8002978 <TIM_OC2_SetConfig+0x138>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d023      	beq.n	8002928 <TIM_OC2_SetConfig+0xe8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a26      	ldr	r2, [pc, #152]	; (800297c <TIM_OC2_SetConfig+0x13c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d01f      	beq.n	8002928 <TIM_OC2_SetConfig+0xe8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a25      	ldr	r2, [pc, #148]	; (8002980 <TIM_OC2_SetConfig+0x140>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d01b      	beq.n	8002928 <TIM_OC2_SetConfig+0xe8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a24      	ldr	r2, [pc, #144]	; (8002984 <TIM_OC2_SetConfig+0x144>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d017      	beq.n	8002928 <TIM_OC2_SetConfig+0xe8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a23      	ldr	r2, [pc, #140]	; (8002988 <TIM_OC2_SetConfig+0x148>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <TIM_OC2_SetConfig+0xe8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a22      	ldr	r2, [pc, #136]	; (800298c <TIM_OC2_SetConfig+0x14c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00f      	beq.n	8002928 <TIM_OC2_SetConfig+0xe8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a21      	ldr	r2, [pc, #132]	; (8002990 <TIM_OC2_SetConfig+0x150>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00b      	beq.n	8002928 <TIM_OC2_SetConfig+0xe8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a20      	ldr	r2, [pc, #128]	; (8002994 <TIM_OC2_SetConfig+0x154>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <TIM_OC2_SetConfig+0xe8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <TIM_OC2_SetConfig+0x158>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d003      	beq.n	8002928 <TIM_OC2_SetConfig+0xe8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a1e      	ldr	r2, [pc, #120]	; (800299c <TIM_OC2_SetConfig+0x15c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d113      	bne.n	8002950 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800292e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	621a      	str	r2, [r3, #32]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40012c00 	.word	0x40012c00
 800297c:	50012c00 	.word	0x50012c00
 8002980:	40013400 	.word	0x40013400
 8002984:	50013400 	.word	0x50013400
 8002988:	40014000 	.word	0x40014000
 800298c:	50014000 	.word	0x50014000
 8002990:	40014400 	.word	0x40014400
 8002994:	50014400 	.word	0x50014400
 8002998:	40014800 	.word	0x40014800
 800299c:	50014800 	.word	0x50014800

080029a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a35      	ldr	r2, [pc, #212]	; (8002ad4 <TIM_OC3_SetConfig+0x134>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00b      	beq.n	8002a1a <TIM_OC3_SetConfig+0x7a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a34      	ldr	r2, [pc, #208]	; (8002ad8 <TIM_OC3_SetConfig+0x138>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <TIM_OC3_SetConfig+0x7a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a33      	ldr	r2, [pc, #204]	; (8002adc <TIM_OC3_SetConfig+0x13c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d003      	beq.n	8002a1a <TIM_OC3_SetConfig+0x7a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a32      	ldr	r2, [pc, #200]	; (8002ae0 <TIM_OC3_SetConfig+0x140>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d10d      	bne.n	8002a36 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a26      	ldr	r2, [pc, #152]	; (8002ad4 <TIM_OC3_SetConfig+0x134>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d023      	beq.n	8002a86 <TIM_OC3_SetConfig+0xe6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a25      	ldr	r2, [pc, #148]	; (8002ad8 <TIM_OC3_SetConfig+0x138>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01f      	beq.n	8002a86 <TIM_OC3_SetConfig+0xe6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a24      	ldr	r2, [pc, #144]	; (8002adc <TIM_OC3_SetConfig+0x13c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01b      	beq.n	8002a86 <TIM_OC3_SetConfig+0xe6>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <TIM_OC3_SetConfig+0x140>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d017      	beq.n	8002a86 <TIM_OC3_SetConfig+0xe6>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a22      	ldr	r2, [pc, #136]	; (8002ae4 <TIM_OC3_SetConfig+0x144>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <TIM_OC3_SetConfig+0xe6>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a21      	ldr	r2, [pc, #132]	; (8002ae8 <TIM_OC3_SetConfig+0x148>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00f      	beq.n	8002a86 <TIM_OC3_SetConfig+0xe6>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a20      	ldr	r2, [pc, #128]	; (8002aec <TIM_OC3_SetConfig+0x14c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00b      	beq.n	8002a86 <TIM_OC3_SetConfig+0xe6>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <TIM_OC3_SetConfig+0x150>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <TIM_OC3_SetConfig+0xe6>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <TIM_OC3_SetConfig+0x154>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d003      	beq.n	8002a86 <TIM_OC3_SetConfig+0xe6>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <TIM_OC3_SetConfig+0x158>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d113      	bne.n	8002aae <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	621a      	str	r2, [r3, #32]
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40012c00 	.word	0x40012c00
 8002ad8:	50012c00 	.word	0x50012c00
 8002adc:	40013400 	.word	0x40013400
 8002ae0:	50013400 	.word	0x50013400
 8002ae4:	40014000 	.word	0x40014000
 8002ae8:	50014000 	.word	0x50014000
 8002aec:	40014400 	.word	0x40014400
 8002af0:	50014400 	.word	0x50014400
 8002af4:	40014800 	.word	0x40014800
 8002af8:	50014800 	.word	0x50014800

08002afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	031b      	lsls	r3, r3, #12
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a36      	ldr	r2, [pc, #216]	; (8002c34 <TIM_OC4_SetConfig+0x138>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00b      	beq.n	8002b78 <TIM_OC4_SetConfig+0x7c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a35      	ldr	r2, [pc, #212]	; (8002c38 <TIM_OC4_SetConfig+0x13c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d007      	beq.n	8002b78 <TIM_OC4_SetConfig+0x7c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a34      	ldr	r2, [pc, #208]	; (8002c3c <TIM_OC4_SetConfig+0x140>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d003      	beq.n	8002b78 <TIM_OC4_SetConfig+0x7c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a33      	ldr	r2, [pc, #204]	; (8002c40 <TIM_OC4_SetConfig+0x144>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d10d      	bne.n	8002b94 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	031b      	lsls	r3, r3, #12
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a27      	ldr	r2, [pc, #156]	; (8002c34 <TIM_OC4_SetConfig+0x138>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d023      	beq.n	8002be4 <TIM_OC4_SetConfig+0xe8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a26      	ldr	r2, [pc, #152]	; (8002c38 <TIM_OC4_SetConfig+0x13c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d01f      	beq.n	8002be4 <TIM_OC4_SetConfig+0xe8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a25      	ldr	r2, [pc, #148]	; (8002c3c <TIM_OC4_SetConfig+0x140>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d01b      	beq.n	8002be4 <TIM_OC4_SetConfig+0xe8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a24      	ldr	r2, [pc, #144]	; (8002c40 <TIM_OC4_SetConfig+0x144>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d017      	beq.n	8002be4 <TIM_OC4_SetConfig+0xe8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a23      	ldr	r2, [pc, #140]	; (8002c44 <TIM_OC4_SetConfig+0x148>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d013      	beq.n	8002be4 <TIM_OC4_SetConfig+0xe8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <TIM_OC4_SetConfig+0x14c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d00f      	beq.n	8002be4 <TIM_OC4_SetConfig+0xe8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a21      	ldr	r2, [pc, #132]	; (8002c4c <TIM_OC4_SetConfig+0x150>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00b      	beq.n	8002be4 <TIM_OC4_SetConfig+0xe8>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a20      	ldr	r2, [pc, #128]	; (8002c50 <TIM_OC4_SetConfig+0x154>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d007      	beq.n	8002be4 <TIM_OC4_SetConfig+0xe8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <TIM_OC4_SetConfig+0x158>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d003      	beq.n	8002be4 <TIM_OC4_SetConfig+0xe8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a1e      	ldr	r2, [pc, #120]	; (8002c58 <TIM_OC4_SetConfig+0x15c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d113      	bne.n	8002c0c <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002bf2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	019b      	lsls	r3, r3, #6
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	019b      	lsls	r3, r3, #6
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	621a      	str	r2, [r3, #32]
}
 8002c26:	bf00      	nop
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	50012c00 	.word	0x50012c00
 8002c3c:	40013400 	.word	0x40013400
 8002c40:	50013400 	.word	0x50013400
 8002c44:	40014000 	.word	0x40014000
 8002c48:	50014000 	.word	0x50014000
 8002c4c:	40014400 	.word	0x40014400
 8002c50:	50014400 	.word	0x50014400
 8002c54:	40014800 	.word	0x40014800
 8002c58:	50014800 	.word	0x50014800

08002c5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002ca0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a21      	ldr	r2, [pc, #132]	; (8002d38 <TIM_OC5_SetConfig+0xdc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d023      	beq.n	8002cfe <TIM_OC5_SetConfig+0xa2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a20      	ldr	r2, [pc, #128]	; (8002d3c <TIM_OC5_SetConfig+0xe0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01f      	beq.n	8002cfe <TIM_OC5_SetConfig+0xa2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <TIM_OC5_SetConfig+0xe4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01b      	beq.n	8002cfe <TIM_OC5_SetConfig+0xa2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <TIM_OC5_SetConfig+0xe8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d017      	beq.n	8002cfe <TIM_OC5_SetConfig+0xa2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <TIM_OC5_SetConfig+0xec>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <TIM_OC5_SetConfig+0xa2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <TIM_OC5_SetConfig+0xf0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00f      	beq.n	8002cfe <TIM_OC5_SetConfig+0xa2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <TIM_OC5_SetConfig+0xf4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00b      	beq.n	8002cfe <TIM_OC5_SetConfig+0xa2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <TIM_OC5_SetConfig+0xf8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d007      	beq.n	8002cfe <TIM_OC5_SetConfig+0xa2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a19      	ldr	r2, [pc, #100]	; (8002d58 <TIM_OC5_SetConfig+0xfc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d003      	beq.n	8002cfe <TIM_OC5_SetConfig+0xa2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <TIM_OC5_SetConfig+0x100>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d109      	bne.n	8002d12 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	621a      	str	r2, [r3, #32]
}
 8002d2c:	bf00      	nop
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40012c00 	.word	0x40012c00
 8002d3c:	50012c00 	.word	0x50012c00
 8002d40:	40013400 	.word	0x40013400
 8002d44:	50013400 	.word	0x50013400
 8002d48:	40014000 	.word	0x40014000
 8002d4c:	50014000 	.word	0x50014000
 8002d50:	40014400 	.word	0x40014400
 8002d54:	50014400 	.word	0x50014400
 8002d58:	40014800 	.word	0x40014800
 8002d5c:	50014800 	.word	0x50014800

08002d60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	051b      	lsls	r3, r3, #20
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a22      	ldr	r2, [pc, #136]	; (8002e40 <TIM_OC6_SetConfig+0xe0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d023      	beq.n	8002e04 <TIM_OC6_SetConfig+0xa4>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a21      	ldr	r2, [pc, #132]	; (8002e44 <TIM_OC6_SetConfig+0xe4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d01f      	beq.n	8002e04 <TIM_OC6_SetConfig+0xa4>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a20      	ldr	r2, [pc, #128]	; (8002e48 <TIM_OC6_SetConfig+0xe8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d01b      	beq.n	8002e04 <TIM_OC6_SetConfig+0xa4>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a1f      	ldr	r2, [pc, #124]	; (8002e4c <TIM_OC6_SetConfig+0xec>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d017      	beq.n	8002e04 <TIM_OC6_SetConfig+0xa4>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	; (8002e50 <TIM_OC6_SetConfig+0xf0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <TIM_OC6_SetConfig+0xa4>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <TIM_OC6_SetConfig+0xf4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00f      	beq.n	8002e04 <TIM_OC6_SetConfig+0xa4>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a1c      	ldr	r2, [pc, #112]	; (8002e58 <TIM_OC6_SetConfig+0xf8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00b      	beq.n	8002e04 <TIM_OC6_SetConfig+0xa4>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <TIM_OC6_SetConfig+0xfc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <TIM_OC6_SetConfig+0xa4>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <TIM_OC6_SetConfig+0x100>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d003      	beq.n	8002e04 <TIM_OC6_SetConfig+0xa4>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <TIM_OC6_SetConfig+0x104>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d109      	bne.n	8002e18 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	029b      	lsls	r3, r3, #10
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	621a      	str	r2, [r3, #32]
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	50012c00 	.word	0x50012c00
 8002e48:	40013400 	.word	0x40013400
 8002e4c:	50013400 	.word	0x50013400
 8002e50:	40014000 	.word	0x40014000
 8002e54:	50014000 	.word	0x50014000
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	50014400 	.word	0x50014400
 8002e60:	40014800 	.word	0x40014800
 8002e64:	50014800 	.word	0x50014800

08002e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	f023 0201 	bic.w	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f023 030a 	bic.w	r3, r3, #10
 8002ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	621a      	str	r2, [r3, #32]
}
 8002eba:	bf00      	nop
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b087      	sub	sp, #28
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f023 0210 	bic.w	r2, r3, #16
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	031b      	lsls	r3, r3, #12
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f043 0307 	orr.w	r3, r3, #7
 8002f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	609a      	str	r2, [r3, #8]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	021a      	lsls	r2, r3, #8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	609a      	str	r2, [r3, #8]
}
 8002f94:	bf00      	nop
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a1a      	ldr	r2, [r3, #32]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	621a      	str	r2, [r3, #32]
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003000:	2302      	movs	r3, #2
 8003002:	e0a1      	b.n	8003148 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a4a      	ldr	r2, [pc, #296]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00e      	beq.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a49      	ldr	r2, [pc, #292]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d009      	beq.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a47      	ldr	r2, [pc, #284]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d004      	beq.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a46      	ldr	r2, [pc, #280]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d108      	bne.n	800305e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003052:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003068:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a34      	ldr	r2, [pc, #208]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d04a      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a33      	ldr	r2, [pc, #204]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d045      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003098:	d040      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030a2:	d03b      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a2e      	ldr	r2, [pc, #184]	; (8003164 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d036      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a2d      	ldr	r2, [pc, #180]	; (8003168 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d031      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2b      	ldr	r2, [pc, #172]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d02c      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a2a      	ldr	r2, [pc, #168]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d027      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a28      	ldr	r2, [pc, #160]	; (8003174 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d022      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a27      	ldr	r2, [pc, #156]	; (8003178 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d01d      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1d      	ldr	r2, [pc, #116]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d018      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d013      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a20      	ldr	r2, [pc, #128]	; (800317c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00e      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d009      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d004      	beq.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d10c      	bne.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003122:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	4313      	orrs	r3, r2
 800312c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40012c00 	.word	0x40012c00
 8003158:	50012c00 	.word	0x50012c00
 800315c:	40013400 	.word	0x40013400
 8003160:	50013400 	.word	0x50013400
 8003164:	40000400 	.word	0x40000400
 8003168:	50000400 	.word	0x50000400
 800316c:	40000800 	.word	0x40000800
 8003170:	50000800 	.word	0x50000800
 8003174:	40000c00 	.word	0x40000c00
 8003178:	50000c00 	.word	0x50000c00
 800317c:	40001800 	.word	0x40001800
 8003180:	50001800 	.word	0x50001800
 8003184:	40014000 	.word	0x40014000
 8003188:	50014000 	.word	0x50014000

0800318c <memset>:
 800318c:	4402      	add	r2, r0
 800318e:	4603      	mov	r3, r0
 8003190:	4293      	cmp	r3, r2
 8003192:	d100      	bne.n	8003196 <memset+0xa>
 8003194:	4770      	bx	lr
 8003196:	f803 1b01 	strb.w	r1, [r3], #1
 800319a:	e7f9      	b.n	8003190 <memset+0x4>

0800319c <__libc_init_array>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	4d0d      	ldr	r5, [pc, #52]	; (80031d4 <__libc_init_array+0x38>)
 80031a0:	2600      	movs	r6, #0
 80031a2:	4c0d      	ldr	r4, [pc, #52]	; (80031d8 <__libc_init_array+0x3c>)
 80031a4:	1b64      	subs	r4, r4, r5
 80031a6:	10a4      	asrs	r4, r4, #2
 80031a8:	42a6      	cmp	r6, r4
 80031aa:	d109      	bne.n	80031c0 <__libc_init_array+0x24>
 80031ac:	4d0b      	ldr	r5, [pc, #44]	; (80031dc <__libc_init_array+0x40>)
 80031ae:	2600      	movs	r6, #0
 80031b0:	4c0b      	ldr	r4, [pc, #44]	; (80031e0 <__libc_init_array+0x44>)
 80031b2:	f000 f817 	bl	80031e4 <_init>
 80031b6:	1b64      	subs	r4, r4, r5
 80031b8:	10a4      	asrs	r4, r4, #2
 80031ba:	42a6      	cmp	r6, r4
 80031bc:	d105      	bne.n	80031ca <__libc_init_array+0x2e>
 80031be:	bd70      	pop	{r4, r5, r6, pc}
 80031c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c4:	3601      	adds	r6, #1
 80031c6:	4798      	blx	r3
 80031c8:	e7ee      	b.n	80031a8 <__libc_init_array+0xc>
 80031ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ce:	3601      	adds	r6, #1
 80031d0:	4798      	blx	r3
 80031d2:	e7f2      	b.n	80031ba <__libc_init_array+0x1e>
 80031d4:	0800320c 	.word	0x0800320c
 80031d8:	0800320c 	.word	0x0800320c
 80031dc:	0800320c 	.word	0x0800320c
 80031e0:	08003210 	.word	0x08003210

080031e4 <_init>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	bf00      	nop
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr

080031f0 <_fini>:
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	bf00      	nop
 80031f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f6:	bc08      	pop	{r3}
 80031f8:	469e      	mov	lr, r3
 80031fa:	4770      	bx	lr
